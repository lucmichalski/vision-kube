/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*** 
	{ m -> 
		if (m['T'] == DOUBLE) {
			return (m['R'] == DOUBLE); 		
		}
		if (m['T'] == LONG) {
			return (m['R'] == DOUBLE); 		
		}
		return (m['R'] == FLOAT);
	}
***/
package org.openimaj.knn;

import java.util.ArrayList;
import java.util.List;

import org.openimaj.feature.#T#FVComparison;
import org.openimaj.feature.#T#FVComparator;
import org.openimaj.util.pair.Int#R#Pair;
import org.openimaj.util.queue.BoundedPriorityQueue;

/**
 * Exact (brute-force) k-nearest-neighbour implementation.
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 * @author Sina Samangooei (ss@ecs.soton.ac.uk)
 */
public class #T#NearestNeighboursExact extends #T#NearestNeighbours {
    /**
	 * {@link NearestNeighboursFactory} for producing
	 * {@link #T#NearestNeighboursExact}s.
	 * 
	 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
	 */
    public static final class Factory implements NearestNeighboursFactory<#T#NearestNeighboursExact, #t#[]> {
        private final #T#FVComparator distance;
        
        /**
         * Construct the factory using Euclidean distance for the 
         * produced #T#NearestNeighbours instances.
         */
        public Factory() {
            this.distance = null;
        }
        
        /**
         * Construct the factory with the given distance function
         * for the produced #T#NearestNeighbours instances.
         * 
		 * @param distance
		 *            the distance function
         */
        public Factory(#T#FVComparator distance) {
            this.distance = distance;
        }
        
        @Override
        public #T#NearestNeighboursExact create(#t#[][] data) {
            return new #T#NearestNeighboursExact(data, distance);
        }
    }
    
	protected final #t#[][] pnts;
	protected final #T#FVComparator distance;

	/**
	 * Construct the #T#NearestNeighboursExact over the provided
	 * dataset and using Euclidean distance.
	 * @param pnts the dataset
	 */
	public #T#NearestNeighboursExact(final #t# [][] pnts) {
		this(pnts, null);
	}

	/**
	 * Construct the #T#NearestNeighboursExact over the provided
	 * dataset with the given distance function. 
	 * <p>
	 * Note: If the distance function provides similarities rather
	 * than distances they are automatically inverted.
	 *  
	 * @param pnts the dataset
	 * @param distance the distance function
	 */
	public #T#NearestNeighboursExact(final #t# [][] pnts, final #T#FVComparator distance) {
		this.pnts = pnts;
		this.distance = distance;
	}
	
	@Override
	public void searchNN(final #t# [][] qus, int [] indices, #r# [] distances) {
		final int N = qus.length;
		
		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(1, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(2);
		list.add(new Int#R#Pair());
		list.add(new Int#R#Pair());
		
		for (int n=0; n < N; ++n) {
			List<Int#R#Pair> result = search(qus[n], queue, list);
			
			final Int#R#Pair p = result.get(0);
			indices[n] = p.first;
			distances[n] = p.second;
		}
	}

	@Override
	public void searchKNN(final #t# [][] qus, int K, int [][] indices, #r# [][] distances) {
		// Fix for when the user asks for too many points.
		K = Math.min(K, pnts.length);

		final int N = qus.length;

		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(K, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(K + 1);
		for (int i = 0; i < K + 1; i++) {
			list.add(new Int#R#Pair());
		}

        // search on each query
		for (int n = 0; n < N; ++n) {
			List<Int#R#Pair> result = search(qus[n], queue, list);
			
			for (int k = 0; k < K; ++k) {
				final Int#R#Pair p = result.get(k);
				indices[n][k] = p.first;
				distances[n][k] = p.second;
			}
		}
	}
	
	@Override
	public void searchNN(final List<#t#[]> qus, int [] indices, #r# [] distances) {
		final int N = qus.size();
		
		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(1, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(2);
		list.add(new Int#R#Pair());
		list.add(new Int#R#Pair());
		
		for (int n=0; n < N; ++n) {
			List<Int#R#Pair> result = search(qus.get(n), queue, list);
			
			final Int#R#Pair p = result.get(0);
			indices[n] = p.first;
			distances[n] = p.second;
		}
	}

	@Override
	public void searchKNN(final List<#t#[]> qus, int K, int [][] indices, #r# [][] distances) {
		// Fix for when the user asks for too many points.
		K = Math.min(K, pnts.length);

		final int N = qus.size();

		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(K, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(K + 1);
		for (int i = 0; i < K + 1; i++) {
			list.add(new Int#R#Pair());
		}

        // search on each query
		for (int n = 0; n < N; ++n) {
			List<Int#R#Pair> result = search(qus.get(n), queue, list);
			
			for (int k = 0; k < K; ++k) {
				final Int#R#Pair p = result.get(k);
				indices[n][k] = p.first;
				distances[n][k] = p.second;
			}
		}
	}

    @Override
	public List<Int#R#Pair> searchKNN(#t#[] query, int K) {
		// Fix for when the user asks for too many points.
		K = Math.min(K, pnts.length);

		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(K, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(K + 1);
		for (int i = 0; i < K + 1; i++) {
			list.add(new Int#R#Pair());
		}

        // search
        return search(query, queue, list);
	}

	@Override
	public Int#R#Pair searchNN(final #t#[] query) {
		final BoundedPriorityQueue<Int#R#Pair> queue =
				new BoundedPriorityQueue<Int#R#Pair>(1, Int#R#Pair.SECOND_ITEM_ASCENDING_COMPARATOR);

        //prepare working data
		List<Int#R#Pair> list = new ArrayList<Int#R#Pair>(2);
		list.add(new Int#R#Pair());
		list.add(new Int#R#Pair());
		
		return search(query, queue, list).get(0);
	}

    private List<Int#R#Pair> search(#t#[] query, BoundedPriorityQueue<Int#R#Pair> queue, List<Int#R#Pair> results) {
        Int#R#Pair wp = null;
        
        // reset all values in the queue to MAX, -1
		for (final Int#R#Pair p : results) {
			p.second = Float.MAX_VALUE;
			p.first = -1;
			wp = queue.offerItem(p);
		}

        // perform the search
		for (int i = 0; i < this.pnts.length; i++) {
			wp.second = distanceFunc(distance, query, pnts[i]);
			wp.first = i;
			wp = queue.offerItem(wp);
		}
		
        return queue.toOrderedListDestructive();
    }

	@Override
	public int numDimensions() {
		return pnts[0].length;
	}

	@Override
	public int size() {
		return pnts.length;
	}
	
	/**
	 * Get the underlying data points.
	 * 
	 * @return the data points
	 */
	public #t#[][] getPoints() {
		return this.pnts;
	}

	/**
	 * Compute the distance between two vectors using the underlying distance
	 * comparison used by this class.
	 * 
	 * @param a
	 *            the first vector
	 * @param b
	 *            the second vector
	 * @return the distance between the two vectors
	 */
	public #r# computeDistance(#t#[] a, #t#[] b) {
		if (distance == null)
			return (#r#) #T#FVComparison.SUM_SQUARE.compare(a, b);
		return (#r#) distance.compare(a, b);
	}

	/**
	 * Get the distance comparator
	 * 
	 * @return the distance comparator
	 */
	public #T#FVComparator distanceComparator() {
		return this.distance;
	}
}
