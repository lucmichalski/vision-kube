/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.ml.clustering.kmeans;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.IOException;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.openimaj.data.RandomData;
import org.openimaj.io.IOUtils;
import org.openimaj.knn.#T#NearestNeighbours;
import org.openimaj.knn.#T#NearestNeighboursExact;
import org.openimaj.knn.approximate.#T#NearestNeighboursKDTree;
import org.openimaj.ml.clustering.assignment.hard.Hierarchical#T#HardAssigner;


/**
 * Test the Hierarchical KMeans algorithm
 *
 * @author Sina Samangooei (ss@ecs.soton.ac.uk)
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 */
public class Hierarchical#T#KMeansTest {
	/**
	 * Temporary directory for IO tests
	 */
    @Rule
    public TemporaryFolder folder = new TemporaryFolder();
    	
	/**
	 * Test hierarchical kmeans algorithm using an exact and inexact version of the FastKMeans implementation
	 * @throws IOException
	 */
	@Test public void testHierarchical#T#KMeans() throws IOException {
		KMeansConfiguration<#T#NearestNeighbours, #t#[]> conf = new KMeansConfiguration<#T#NearestNeighbours, #t#[]>();
		conf.setMaxIterations(1);
		
		conf.setNearestNeighbourFactory(new #T#NearestNeighboursExact.Factory());
		testHierarchical#T#KMeans(conf);
		
		conf.setNearestNeighbourFactory(new #T#NearestNeighboursKDTree.Factory());
		testHierarchical#T#KMeans(conf);
	}
	
	/**
	 * Test hierarchical kmeans loading saving and consistency for a given method
	 * 
	 * @param conf the KMeans configuration
	 * @throws IOException
	 */
	public void testHierarchical#T#KMeans(KMeansConfiguration<#T#NearestNeighbours, #t#[]> conf) throws IOException {
		int dim = 128;
		#t# [][] data = RandomData.getRandom#T#Array(1000, dim, (#t#)0, (#t#)128, 1);
		Hierarchical#T#KMeans hikm = new Hierarchical#T#KMeans(conf, dim, 5, 6);
		
		Hierarchical#T#KMeansResult cluster = hikm.cluster(data);
		
		// read/write saveable
		//ascii
		File saveableFile = folder.newFile("hikmSaveable");
		IOUtils.writeASCII(saveableFile, cluster);
		
		//ascii using readASCII
		Hierarchical#T#KMeansResult cluster2 = IOUtils.read(saveableFile, Hierarchical#T#KMeansResult.class);
		
		assertHIKMEQ(cluster, cluster2, data);
		
		//binary
		File fileB = folder.newFile("hikm");
		IOUtils.writeBinary(fileB, cluster);
		
		Hierarchical#T#KMeansResult cluster2B = IOUtils.read(fileB, Hierarchical#T#KMeansResult.class);

		assertHIKMEQ(cluster, cluster2B, data);
		
		saveableFile.delete();
		fileB.delete();
	}

	private void assertHIKMEQ(Hierarchical#T#KMeansResult hikm, Hierarchical#T#KMeansResult hikm2, #t#[][] data) {
		assertEquals(hikm.countActiveLeafNodes(), hikm2.countActiveLeafNodes());
		assertEquals(hikm.getDepth(), hikm2.getDepth());
		assertEquals(hikm.getK(), hikm2.getK());
		assertEquals(hikm.numDimensions(), hikm2.numDimensions());
		
		Hierarchical#T#HardAssigner a1 = hikm.defaultHardAssigner();
		Hierarchical#T#HardAssigner a2 = hikm2.defaultHardAssigner();
		
		for (int i=0; i<data.length; i++)
			assertEquals(
					a1.assign(data[i]), 
					a2.assign(data[i])
			);
	}

}
