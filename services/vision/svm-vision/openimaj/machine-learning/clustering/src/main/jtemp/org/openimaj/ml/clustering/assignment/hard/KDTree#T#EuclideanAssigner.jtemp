/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*** 
	{ m -> 
		if (m['T'] == DOUBLE) {
			return (m['R'] == DOUBLE); 		
		}
		if (m['T'] == LONG) {
			return (m['R'] == DOUBLE); 
		}
		return (m['R'] == FLOAT);
	}
***/

package org.openimaj.ml.clustering.assignment.hard;

import org.openimaj.knn.#T#NearestNeighbours;
import org.openimaj.knn.#T#NearestNeighboursProvider;
import org.openimaj.knn.approximate.#T#NearestNeighboursKDTree;
import org.openimaj.ml.clustering.assignment.HardAssigner;
import org.openimaj.ml.clustering.CentroidsProvider;
import org.openimaj.util.pair.Int#R#Pair;

/**
 * A {@link HardAssigner} that uses a {@link #T#NearestNeighboursKDTree} to
 * generate approximately correct cluster assignments.
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 *
 */
public class KDTree#T#EuclideanAssigner implements HardAssigner<#t#[], #r#[], Int#R#Pair> {
	protected #T#NearestNeighboursKDTree nn;
	
	/**
	 * Construct the assigner using the given cluster data.
	 * 
	 * @param provider the cluster data provider
	 */
	public KDTree#T#EuclideanAssigner(CentroidsProvider<#t#[]> provider) {
		if (provider instanceof #T#NearestNeighboursProvider) {
			#T#NearestNeighbours internal = ((#T#NearestNeighboursProvider)provider).getNearestNeighbours();
			
			if (internal != null && internal instanceof #T#NearestNeighboursKDTree) {
				nn = (#T#NearestNeighboursKDTree) internal;
				return;
			}
		}
		
		nn = new #T#NearestNeighboursKDTree(provider.getCentroids(), 
				#T#NearestNeighboursKDTree.DEFAULT_NTREES, #T#NearestNeighboursKDTree.DEFAULT_NCHECKS);
	}
	
	/**
	 * Construct the assigner using the given cluster data.
	 * 
	 * @param data the cluster data
	 */
	public KDTree#T#EuclideanAssigner(#t#[][] data) {
		nn = new #T#NearestNeighboursKDTree(data, #T#NearestNeighboursKDTree.DEFAULT_NTREES, #T#NearestNeighboursKDTree.DEFAULT_NCHECKS);
	}
	
	@Override
	public int[] assign(#t#[][] data) {
		int [] argmins = new int [data.length];
		#r# [] mins = new #r# [data.length];
		nn.searchNN(data, argmins, mins);
		return argmins;
	}

	@Override
	public int assign(#t#[] data) {
		return assign(new #t#[][] { data })[0];
	}

	@Override
	public void assignDistance(#t#[][] data, int[] indices, #r#[] distances) {
		nn.searchNN(data, indices, distances);
	}

	@Override
	public Int#R#Pair assignDistance(#t#[] data) {
		int [] index = new int [1];
		#r# [] distance = new #r# [1];
		
		nn.searchNN(new #t#[][] { data }, index, distance);
		
		return new Int#R#Pair(index[0], distance[0]);
	}
	
	@Override
	public int size() {
	    return nn.size();
	}
	
	@Override
	public int numDimensions() {
	    return nn.numDimensions();
	}
}
