/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.feature;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Tests for Multidimensional#T#FV
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 *
 */
public class Multidimensional#T#FVTest {	
	#t# [][] vals2d = {{1,2,3}, {4,5,6}};
	#t# [][][] vals3d = {{{1,2,3}, {4,5,6}}, {{7,8,9}, {10,11,12}}, {{13,14,15}, {16,17,18}}};
	
	/**
	 * Test 2d feature vectors 
	 */
	@Test
	public void test2d() {
		Multidimensional#T#FV fv = new Multidimensional#T#FV(vals2d);
		
		assertTrue(vals2d[0][0] == fv.get(0));
		assertTrue(vals2d[0][1] == fv.get(1));
		assertTrue(vals2d[0][2] == fv.get(2));
		assertTrue(vals2d[1][0] == fv.get(3));
		assertTrue(vals2d[1][1] == fv.get(4));
		assertTrue(vals2d[1][2] == fv.get(5));
		
		assertTrue(vals2d[0][0] == fv.get(0,0));
		assertTrue(vals2d[0][1] == fv.get(1,0));
		assertTrue(vals2d[0][2] == fv.get(2,0));
		assertTrue(vals2d[1][0] == fv.get(0,1));
		assertTrue(vals2d[1][1] == fv.get(1,1));
		assertTrue(vals2d[1][2] == fv.get(2,1));
	}

	/**
	 * Test 3d feature vectors 
	 */	
	@Test
	public void test3d() {
		Multidimensional#T#FV fv = new Multidimensional#T#FV(vals3d);
		
		for (int k=0; k<3; k++)
			for (int j=0; j<2; j++)
				for (int i=0; i<2; i++)
					assertTrue(vals3d[k][j][i]  == fv.get(i + 3*j + 3*2*k));
		
		for (int k=0; k<3; k++)
			for (int j=0; j<2; j++)
				for (int i=0; i<2; i++)		
					assertTrue(vals3d[k][j][i] == fv.get(i,j,k));
	}
}
