/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.util.pair;

import java.util.Comparator;

/**
 * A pair of #a# and #b# types
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 *
 */
public class #A##B#Pair {
    /**
     * Comparator for comparing the first element of a {@link #A##B#Pair} in ascending order.
     */
    public static final Comparator<#A##B#Pair> FIRST_ITEM_ASCENDING_COMPARATOR = new Comparator<#A##B#Pair>() {
    	@Override
		public int compare(#A##B#Pair o1, #A##B#Pair o2) {
			if (o1.first < o2.first)
				return -1;
			if (o1.first > o2.first)
				return 1;
			return 0;
		}
	};
	
	/**
     * Comparator for comparing the first element of a {@link #A##B#Pair} in descending order.
     */
	public static final Comparator<#A##B#Pair> FIRST_ITEM_DESCENDING_COMPARATOR = new Comparator<#A##B#Pair>() {
    	@Override
		public int compare(#A##B#Pair o1, #A##B#Pair o2) {
			if (o1.first < o2.first)
				return 1;
			if (o1.first > o2.first)
				return -1;
			return 0;
		}
	};
	
	/**
     * Comparator for comparing the second element of a {@link #A##B#Pair} in ascending order.
     */
	public static final Comparator<#A##B#Pair> SECOND_ITEM_ASCENDING_COMPARATOR = new Comparator<#A##B#Pair>() {
    	@Override
		public int compare(#A##B#Pair o1, #A##B#Pair o2) {
			if (o1.second < o2.second)
				return -1;
			if (o1.second > o2.second)
				return 1;
			return 0;
		}
	};
	
	/**
     * Comparator for comparing the second element of a {@link #A##B#Pair} in descending order.
     */
	public static final Comparator<#A##B#Pair> SECOND_ITEM_DESCENDING_COMPARATOR = new Comparator<#A##B#Pair>() {
    	@Override
		public int compare(#A##B#Pair o1, #A##B#Pair o2) {
			if (o1.second < o2.second)
				return 1;
			if (o1.second > o2.second)
				return -1;
			return 0;
		}
	};
    
	/**
	 * The first element of the pair  
	 */
	public #a# first; 
	
	/**
 	 * The first element of the pair  
	 */
	public #b# second; 
	
	/**
	 * Construct pair with given values
	 * 
	 * @param f first value
	 * @param s second value
	 */
	public #A##B#Pair(#a# f, #b# s) {first=f; second=s;}

	/**
 	 * Construct empty pair 
	 */
	public #A##B#Pair() {}
	
	/**
	 * Get the value of the first element
	 * @return the first value
	 */
	public #a# getFirst() {
		return first;
	}

	/**
	 * Set the value of the first element
	 * @param first the value to set
	 */
	public void setFirst(#a# first) {
		this.first = first;
	}

	/**
	 * Get the value of the second element
	 * @return the second
	 */
	public #b# getSecond() {
		return second;
	}

	/**
	 * Set the value of the second element
	 * @param second the value to set
	 */
	public void setSecond(#b# second) {
		this.second = second;
	}
	
	/**
	 * Create a pair from the given values.
	 * 
	 * @param a The first object.
	 * @param b The second object.
	 * @return The pair.
	 */
	public static #A##B#Pair pair(#a# a, #b# b) {
		return new #A##B#Pair(a, b);
	}

	/**
	 * Extract the second values from a list of pairs.
	 *
	 * @param data the data
	 * @return extracted second values
	 */
	public static gnu.trove.list.array.T#B#ArrayList getSecond(Iterable<#A##B#Pair> data) {
		gnu.trove.list.array.T#B#ArrayList extracted = new gnu.trove.list.array.T#B#ArrayList();

		for (#A##B#Pair item : data)
			extracted.add(item.second);

		return extracted;
	}

	/**
	 * Extract the first values from a list of pairs.
	 * 
	 * @param data the data
	 * @return extracted first values
	 */
	public static gnu.trove.list.array.T#A#ArrayList getFirst(Iterable<#A##B#Pair> data) {
		gnu.trove.list.array.T#A#ArrayList extracted = new gnu.trove.list.array.T#A#ArrayList();

		for (#A##B#Pair item : data)
			extracted.add(item.first);

		return extracted;
	}	
	
	@Override
	public String toString() {
		return "("+first + ", "+ second+")";
	}
}
