/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.content.animation.animator;

/**
 * A {@link ValueAnimator} that linearly animates a #TT# value between two values.
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 */
public class Linear#TT#ValueAnimator extends AbstractValueAnimator<#TT#> implements ReversableValueAnimator<#TT#> {
	#t# start;
	#t# finish;
	#t# incr;
	#t# current;
	
	/**
	 * Construct a {@link Linear#TT#ValueAnimator} with the given
	 * start and finish values, and the given duration in ticks 
	 * (number of calls to {@link #nextValue()}. The animation
	 * starts immediately and completes once duration ticks have been 
	 * reached. 
	 * 
	 * @param start start value
	 * @param finish stop value
	 * @param duration
	 */
	public Linear#TT#ValueAnimator(#t# start, #t# finish, int duration) {
		super(start, 0, 0);
		
		current = start;
		this.start = start;
		this.finish = finish;
		this.incr = (#t#)((finish-start) / (#t#)duration);
	}
	
	/**
	 * Construct a {@link Linear#TT#ValueAnimator} with the given
	 * start and finish values, and the given duration in ticks 
	 * (number of calls to {@link #nextValue()}. The animation will
	 * start after startWait ticks, and finish stopWait ticks after
	 * startWait+duration.
	 * 
	 * @param startWait amount of time in ticks to wait before starting animation.
	 * @param stopWait amount of time in ticks to wait after finishing animation. 
	 * @param start start value
	 * @param finish stop value
	 * @param duration
	 */
	public Linear#TT#ValueAnimator(int startWait, int stopWait, #t# start, #t# finish, int duration) {
		super(start, startWait, stopWait);
		
		current = start;
		this.start = start;
		this.finish = finish;
		this.incr = (#t#)((finish-start) / (#t#)duration);
	}
	
	@Override
	public #TT# makeNextValue() {
		current += incr;
		
		if (start<finish && current > finish) 
			current = finish;
		else if (start>finish && current < finish) 
			current = finish;
		
		return current;
	}

	@Override
	protected boolean complete() {
		if (incr == 0) return true;
		
		#t# next = (#t#)(current+incr);
		
		if (start<finish && next-0.0000001 > finish) 
			return true;
		else if (start>finish && next+0.0000001 < finish) 
			return true;
		return false;
	}

	@Override
	protected void resetToInitial() {
		current = start;
	}

	@Override
	public ReversableValueAnimator<#TT#> reverseAnimator() {
		#t# curr = current;
		#t# sta = start;

		reset();

		current = curr;
		incr *= -1;
		start=finish;
		finish = sta;
		
		return this;
	}
}
