/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.content.animation.animator;

/**
 * A {@link ValueAnimator} capable of producing #t# arrays from
 * a set of potentially independent underlying {@link ValueAnimator}s. 
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 */
public class #TT#ArrayValueAnimator implements ValueAnimator<#t#[]> {
	ValueAnimator<#TT#> [] animators;
	
	/**
	 * Construct from an array of {@link ValueAnimator}s
	 * @param animators the animators
	 */
	@SafeVarargs
	public #TT#ArrayValueAnimator(ValueAnimator<#TT#>... animators) {
		this.animators = animators;
	}
	
	/**
	 * Construct a new #TT#ArrayValueAnimator from an array of 
	 * values using {@link Linear#TT#ValueAnimator}s with the 
	 * range -max to +max and the given duration.
	 * 
	 * @param duration the duration of the underlying animators 
	 * @param maxs max distance from 0 (+/-)
	 * @return new {@link #TT#ArrayValueAnimator}
	 */
	@SuppressWarnings("unchecked")
	public static #TT#ArrayValueAnimator makeLinear(int duration, #t#... maxs) {
		ValueAnimator<#TT#> [] animators = new ValueAnimator[maxs.length];
		
		for (int i=0; i<maxs.length; i++)
			animators[i] = new Linear#TT#ValueAnimator((#t#)(-maxs[i]), maxs[i], duration);
		
		return new #TT#ArrayValueAnimator(animators);
	}
	
	/**
	 * Construct a new #TT#ArrayValueAnimator from count 
	 * {@link Linear#TT#ValueAnimator}s with the given start 
	 * and finish values, and the given duration.
	 * 
	 * @param duration the duration
	 * @param count the number of animators
	 * @param start the starting value
	 * @param finish the finishing value
	 * @return new {@link #TT#ArrayValueAnimator}
	 */
	@SuppressWarnings("unchecked")
	public static #TT#ArrayValueAnimator makeLinear(int duration, int count, #t# start, #t# finish) {
		ValueAnimator<#TT#> [] animators = new ValueAnimator[count];
		
		for (int i=0; i<count; i++)
			animators[i] = new Linear#TT#ValueAnimator(start, finish, duration);
		
		return new #TT#ArrayValueAnimator(animators);
	}
	
	/**
	 * Construct a new #TT#ArrayValueAnimator from an array of 
	 * values using {@link RandomLinear#TT#ValueAnimator}s with the 
	 * range -max to +max and the given duration.
	 * 
	 * @param duration the duration of the underlying animators 
	 * @param maxs max distance from 0 (+/-)
	 * @return new {@link #TT#ArrayValueAnimator}
	 */
	@SuppressWarnings("unchecked")
	public static #TT#ArrayValueAnimator makeRandomLinear(int duration, #t#... maxs) {
		ValueAnimator<#TT#> [] animators = new ValueAnimator[maxs.length];
		
		for (int i=0; i<maxs.length; i++)
			animators[i] = new RandomLinear#TT#ValueAnimator((#t#)(-maxs[i]), maxs[i], duration);
		
		return new #TT#ArrayValueAnimator(animators);
	}
	
	/**
	 * Construct a new #TT#ArrayValueAnimator from count 
	 * {@link RandomLinear#TT#ValueAnimator}s with the given start 
	 * and finish values, and the given duration.
	 * 
	 * @param duration the duration
	 * @param count the number of animators
	 * @param start the starting value
	 * @param finish the finishing value
	 * @return new {@link #TT#ArrayValueAnimator}
	 */
	@SuppressWarnings("unchecked")
	public static #TT#ArrayValueAnimator makeRandomLinear(int duration, int count, #t# start, #t# finish) {
		ValueAnimator<#TT#> [] animators = new ValueAnimator[count];
		
		for (int i=0; i<count; i++)
			animators[i] = new RandomLinear#TT#ValueAnimator(start, finish, duration);
		
		return new #TT#ArrayValueAnimator(animators);
	}
	
	@Override
	public #t#[] nextValue() {
		#t#[] value = new #t#[animators.length];
		
		for (int i=0; i<animators.length; i++)
			value[i] = animators[i].nextValue();
		
		return value;
	}

	@Override
	public boolean hasFinished() {
		for (ValueAnimator<#TT#> a : animators) {
			if (!a.hasFinished())
				return false;
		}
		return true;
	}

	@Override
	public void reset() {
		for (ValueAnimator<#TT#> animator : animators)
			animator.reset();
	}
}
