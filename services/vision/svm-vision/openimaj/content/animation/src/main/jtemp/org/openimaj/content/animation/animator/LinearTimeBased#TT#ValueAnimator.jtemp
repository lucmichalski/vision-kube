/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.content.animation.animator;

/**
 * A {@link TimeBasedValueAnimator} that linearly animates a #t# value between two 
 * values over a given time.
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 * @author David Dupplaw (dpd@ecs.soton.ac.uk)
 */
public class LinearTimeBased#TT#ValueAnimator extends TimeBasedValueAnimator<#TT#> 
{
	/**
	 * Construct a {@link LinearTimeBased#TT#ValueAnimator} with the given
	 * start and finish values, and the given duration in millseconds. 
	 * The animation starts on the first call to makeNextValue()
	 * and completes once duration ticks have been reached. 
	 * 
	 * @param start start value
	 * @param finish stop value
	 * @param duration in milliseconds
	 */
	public LinearTimeBased#TT#ValueAnimator( #t# start, #t# finish, long duration) {
		super( start, finish, duration );
	}

	/**
	 *	Calculates the value of the #t# based on the start, end and current
	 *	percentage.
	 *	@param pc The percentage
	 *	@return A #t# that is <code>pc</code> along between start and finish
	 */
	@Override
	public #TT# calculateValue( double pc )
	{
		return (#t#)((endValue-startValue)*pc + startValue);
	}	
}
