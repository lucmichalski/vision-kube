/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*** 
	{ m -> 
		if (m['T'] == DOUBLE) {
			return (m['R'] == DOUBLE); 		
		}
		if (m['T'] == FLOAT) {
			return (m['R'] == FLOAT); 		
		}
		if (m['T'] == LONG) {
			return (m['R'] == LONG); 		
		}
		return (m['R'] == INT);
	}
***/
package org.openimaj.content.animation.animator;

import cern.jet.random.Uniform;
import cern.jet.random.engine.MersenneTwister;

/**
 * A {@link ValueAnimator} that continuously animates between
 * randomly selected values in a range. Once the stop value 
 * has been reached, the animator chooses a new random target
 * value. 
 * 
 * Each animation between values is linear and has a fixed
 * duration. 
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 *
 */
public class RandomLinear#TT#ValueAnimator implements ValueAnimator<#TT#> {
	private int seed;
	
	Uniform rng;
	Linear#TT#ValueAnimator animator;
	private #t# min;
	private #t# max;
	private int duration;
	
	/**
	 * Construct a {@link RandomLinear#TT#ValueAnimator} with the given
	 * range and duration for each sub-animation.
	 * 
	 * @param min minimum allowed value
	 * @param max maximum allowed value
	 * @param duration duration between values
	 */
	public RandomLinear#TT#ValueAnimator(#t# min, #t# max, int duration) {
		seed = (int) System.currentTimeMillis();

		this.min = min;
		this.max = max;
		this.duration = duration;
		
		reset();
	}
	
	/**
	 * Construct a {@link RandomLinear#TT#ValueAnimator} with the given
	 * range, duration for each sub-animation and fixed initial value.
	 * 
	 * @param min minimum allowed value
	 * @param max maximum allowed value
	 * @param duration duration between values
	 * @param initial initial starting value
	 */
	public RandomLinear#TT#ValueAnimator(#t# min, #t# max, int duration, #t# initial) {
		this(min, max, duration);
		setNextAnimator(initial);
	}
	
	/**
	 * Construct a {@link RandomLinear#TT#ValueAnimator} with the given
	 * range and duration for each sub-animation.
	 * 
	 * The sub-animations will start after startWait ticks, and 
	 * finish stopWait ticks after startWait+duration.
	 * 
	 * @param startWait amount of time in ticks to wait before starting animation.
	 * @param stopWait amount of time in ticks to wait after finishing animation. 
	 * @param min minimum allowed value
	 * @param max maximum allowed value
	 * @param duration duration between values
	 */
	public RandomLinear#TT#ValueAnimator(int startWait, int stopWait, #t# min, #t# max, int duration) {
		seed = (int) System.currentTimeMillis();

		this.min = min;
		this.max = max;
		this.duration = duration;
		
		reset();
	}
	
	/**
	 * Construct a {@link RandomLinear#TT#ValueAnimator} with the given
	 * range, duration for each sub-animation and fixed initial value.
	 * 
	 * The sub-animations will start after startWait ticks, and 
	 * finish stopWait ticks after startWait+duration.
	 * 
	 * @param startWait amount of time in ticks to wait before starting animation.
	 * @param stopWait amount of time in ticks to wait after finishing animation. 
	 * @param min minimum allowed value
	 * @param max maximum allowed value
	 * @param duration duration between values
	 * @param initial initial starting value
	 */
	public RandomLinear#TT#ValueAnimator(int startWait, int stopWait, #t# min, #t# max, int duration, #t# initial) {
		this(min, max, duration);
		setNextAnimator(initial);
	}
	
	@Override
	public #TT# nextValue() {
		if (animator.hasFinished()) {
			setNextAnimator(animator.nextValue());
		}

		return animator.nextValue();
	}

	@Override
	public boolean hasFinished() {
		return false;
	}

	@Override
	public void reset() {
		rng = new Uniform(new MersenneTwister(seed));
		
		#t# v1 = (#t#)rng.next#R#FromTo(min, max);
		setNextAnimator(v1);
	}
	
	protected void setNextAnimator(#t# v1) {
		#t# v2 = (#t#)rng.next#R#FromTo(min, max);
		
		animator = new Linear#TT#ValueAnimator(v1, v2, duration);
	}
}
