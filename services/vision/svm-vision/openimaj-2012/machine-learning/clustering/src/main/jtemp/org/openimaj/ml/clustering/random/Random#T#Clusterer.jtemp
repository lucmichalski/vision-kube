/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.openimaj.ml.clustering.random;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

import org.openimaj.data.DataSource;
import org.openimaj.ml.clustering.CentroidsProvider;
import org.openimaj.ml.clustering.SpatialClusterer;
import org.openimaj.ml.clustering.assignment.hard.Exact#T#Assigner;

/**
 * A simple (yet apparently quite effective in high dimensions) 
 * clustering technique trained used random data points. A 
 * configurable number of data points are selected from the training data to
 * represent the centroids.
 *
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 * @author Sina Samangooei (ss@ecs.soton.ac.uk)
 *
 */
public class Random#T#Clusterer implements SpatialClusterer<Random#T#Clusterer, #t#[]>, CentroidsProvider<#t#[]> {
	private static final String HEADER = SpatialClusterer.CLUSTER_HEADER + "RA"+"#T#".charAt(0)+"C";
	
	protected int M;
	protected int K;
	protected Random random;
	protected #t#[][] clusterCenters;
	protected long seed;
	
	/**
	 * Creates a new random byte cluster used to create K centroids with data containing M elements.
	 * 
	 * @param M number of elements in each data vector
	 * @param K number of centroids to be created
	 */
	public Random#T#Clusterer(int M, int K) {
		this.M = M;
		this.K = K;
		this.random = new Random();
		this.seed = -1;
	}
	
	/**
	 * Creates a new random byte cluster used to create centroids with data containing M elements. The 
	 * number of clusters will be equal to the number of data points provided in training.
	 * @param M
	 */
	public Random#T#Clusterer(int M) {
		this(M,-1);
	}
	
	/**
	 * Convinence function for reading saved centroids.
	 */
	public Random#T#Clusterer() {
	}
	
	/**
	 * @param seed the seed for the {@link Random} object used to select random data points.
	 */
	public void setSeed(long seed) {
		this.random = new Random();
		random.setSeed(seed);
		this.seed = seed;
	}
	
	@Override
	public int numDimensions() {
		return M;
	}
	
	/***
	 * Selects K elements from the provided data as the centroids of the clusters. If K is -1 all provided
	 * data points will be selected. It is not guaranteed that the same data point will not be selected
	 * many times.
	 * 
	 * @params data source of centroids
	 * @return true if there were no errors
	 */
	@Override
	public boolean cluster(#t#[][] data) {
		if (K == -1) {
			this.K = data.length;
		}
		
		this.clusterCenters = new #t#[K][];
		
		for (int i = 0; i < this.numClusters(); i++) {
			int dIndex = this.random.nextInt(data.length);
			
			this.clusterCenters[i] = Arrays.copyOf(data[dIndex], data[dIndex].length);
		}
		
		return true;
	}
	
	/**
	 * Selects K elements from the provided {@link DataSource} as the centroids of the clusters. 
	 * If K is -1 all provided data points will be selected. It is not guaranteed that the same data 
	 * point will not be selected many times.
	 * 
	 * @params data a data source object
	 * @return true if there were no problems
	 */
	@Override
	public boolean cluster(DataSource<#t#[]> data) {
		if (K == -1) {
			this.K = data.numRows();
		}
		
		this.clusterCenters = new #t#[K][];
		#t#[][] dataRow = new #t#[1][M];
		
		for (int i = 0; i < this.numClusters(); i++) {
			int dIndex = this.random.nextInt(data.numRows());
			
			data.getData(dIndex,dIndex+1,dataRow);
			
			this.clusterCenters[i] = Arrays.copyOf(dataRow[0], dataRow[0].length);
		}
		
		return true;
	}

	@Override
	public int numClusters() {
		return K;
	}

	@Override
	public #t#[][] getCentroids() {
		return this.clusterCenters;
	}
	
	@Override
	public String toString() {
		String r = "";
		r += "Number of clusters: " + this.clusterCenters.length + "\n";
		r += "Value for K: " + K + "\n";
		r += "Value for M: " + M + "\n";
		return r;
	}

	@Override
	public String asciiHeader() {
		return "ASCII"+HEADER;
	}

	@Override
	public byte[] binaryHeader() {
		return HEADER.getBytes();
	}

	@Override
	public void readASCII(Scanner br) throws IOException {
		// Read the header
		
		this.M = Integer.parseInt(br.nextLine());
		this.K = Integer.parseInt(br.nextLine());
		this.seed = Long.parseLong(br.nextLine());

		if(this.clusterCenters==null || this.clusterCenters.length != K)
			this.clusterCenters = new #t#[K][];

		for (int i = 0; i < K; i ++) {
			if(this.clusterCenters[i] == null || this.clusterCenters[i].length != M) clusterCenters[i] = new #t#[M];
			String[] line = br.nextLine().split(",");
			
			for(int j = 0; j < M; j++) {
				clusterCenters[i][j] = #TT#.parse#T#(line[j]);
			}
		}
	}

	@Override
	public void readBinary(DataInput in) throws IOException {	
		M = in.readInt();
		K = in.readInt();
		seed = in.readLong();
		
		if(this.clusterCenters==null || this.clusterCenters.length != K)
			this.clusterCenters = new #t#[K][];
			
		for(int i = 0; i < K; i ++) {
			if (this.clusterCenters[i] == null || this.clusterCenters[i].length != M) {
			    clusterCenters[i] = new #t#[M];
		    }
			
			for (int j = 0; j < M; j++) {
				clusterCenters[i][j] = in.read#T#();
			}
		}
	}

	@Override
	public void writeASCII(PrintWriter writer) throws IOException {
		writer.println(this.M);
		writer.println(this.K);
		writer.println(this.seed);
		
		for (int i = 0; i < this.clusterCenters.length; i ++) {
			for (int j = 0 ; j < this.clusterCenters[i].length; j++) {
				writer.print(this.clusterCenters[i][j] + ",");
			}
			
			writer.println();
		}
	}

	@Override
	public void writeBinary(DataOutput out) throws IOException {
		out.writeInt(this.M);
		out.writeInt(this.K);
		out.writeLong(this.seed);
		
		for (int i = 0; i < this.clusterCenters.length; i ++) {
			for (int j = 0 ; j < this.clusterCenters[i].length; j++) {
				out.write#T#(this.clusterCenters[i][j]);
			}
		}
	}
	
	@Override
	public Exact#T#Assigner defaultHardAssigner() {
		return new Exact#T#Assigner(this);
	}
}
