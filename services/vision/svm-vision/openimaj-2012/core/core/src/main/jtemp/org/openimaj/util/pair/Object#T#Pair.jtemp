/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.util.pair;

import java.util.ArrayList;
import java.util.List;

import gnu.trove.list.array.T#T#ArrayList;

/**
 * A pair of a generic type <Q> and #t#
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 * 
 * @param <Q> type of first object
 */
public class Object#T#Pair<Q> {
	/**
   	 * The first element of the pair  
 	 */
	public Q first;
	
	/**
 	 * The first element of the pair  
	 */
	public #t# second; 
	
	/**
	 * Construct pair with given values
	 * 
	 * @param f first value
	 * @param s second value
	 */
	public Object#T#Pair(Q f, #t# s) {first=f; second=s;} 
	
	/**
 	 * Construct empty pair 
	 */
	public Object#T#Pair() { }
	
	/**
	 * Get the value of the first element
	 * @return the first value
	 */
	public Q getFirst() {
		return first;
	}

	/**
	 * Set the value of the first element
	 * @param first the value to set
	 */
	public void setFirst(Q first) {
		this.first = first;
	}

	/**
	 * Get the value of the second element
	 * @return the second
	 */
	public #t# getSecond() {
		return second;
	}

	/**
	 * Set the value of the second element
	 * @param second the value to set
	 */
	public void setSecond(#t# second) {
		this.second = second;
	}
	
	/**
	 * Create a pair from the given objects.
	 * 
	 * @param <Q> Type of first object.
	 * @param q The first object.
	 * @param t The second object.
	 * @return The pair.
	 */
	public static <Q> Object#T#Pair<Q> pair(Q q, #t# t) {
		return new Object#T#Pair<Q>(q, t);
	}

	/**
	 * Extract the second objects from a list of pairs.
	 *
	 * @param <Q> type of first object
	 * @param data the data
	 * @return extracted second objects
	 */
	public static <Q> T#T#ArrayList getSecond(Iterable<Object#T#Pair<Q>> data) {
		T#T#ArrayList extracted = new T#T#ArrayList();

		for (Object#T#Pair<Q> item : data)
			extracted.add(item.second);

		return extracted;
	}

	/**
	 * Extract the first objects from a list of pairs.
	 * 
	 * @param <Q> type of first object
	 * @param data the data
	 * @return extracted first objects
	 */
	public static <Q> List<Q> getFirst(Iterable<Object#T#Pair<Q>> data) {
		List<Q> extracted = new ArrayList<Q>();

		for (Object#T#Pair<Q> item : data)
			extracted.add(item.first);

		return extracted;
	}
}
