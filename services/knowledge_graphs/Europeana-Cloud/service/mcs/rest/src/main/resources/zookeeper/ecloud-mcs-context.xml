<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/jee  http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
                        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

    <context:annotation-config/>    
	<context:property-placeholder properties-ref="configurationLoader"/>
    <import resource="classpath:config.xml" />

    <context:component-scan
        base-package="eu.europeana.cloud.service.mcs.rest"/>

    <aop:aspectj-autoproxy/>
    <bean id="serviceExceptionTranslator" 
          class="eu.europeana.cloud.service.mcs.persistent.aspects.ServiceExceptionTranslator"/>
          
          
    <!--connection provider - with options the same as in embedded cassandra-->
    <bean id="dbService"
          class="eu.europeana.cloud.cassandra.CassandraConnectionProvider">
        <constructor-arg name="hosts" value="${mcs.cassandra.host}" />
        <constructor-arg name="port" value="${mcs.cassandra.port}" />

        <constructor-arg name="keyspaceName" value="${mcs.cassandra.keyspace}" />

        <constructor-arg name="userName" value="${mcs.cassandra.user}" />
        <constructor-arg name="password" value="${mcs.cassandra.password}" />
    </bean>

    <bean id="cassandraDataSetService" 
          class="eu.europeana.cloud.service.mcs.persistent.CassandraDataSetService"/>
    <bean id="cassandraDataSetDAO" 
          class="eu.europeana.cloud.service.mcs.persistent.cassandra.CassandraDataSetDAO"/>

    <bean id="cassandraRecordService" 
          class="eu.europeana.cloud.service.mcs.persistent.CassandraRecordService"/>
    <bean id="cassandraRecordDAO" 
          class="eu.europeana.cloud.service.mcs.persistent.cassandra.CassandraRecordDAO"/>
    <bean id="swiftContentDAO" 
          class="eu.europeana.cloud.service.mcs.persistent.swift.SwiftContentDAO"/>

    <bean id="swiftConnectionProvider" 
          class="eu.europeana.cloud.service.mcs.persistent.swift.SimpleSwiftConnectionProvider">
        <constructor-arg name="provider" value="${mcs.swift.provider}" />
        <constructor-arg name="container" value="${mcs.swift.container}" />

        <constructor-arg name="endpoint" value="${mcs.swift.endpoint}" />

        <constructor-arg name="user" value="${mcs.swift.user}" />
        <constructor-arg name="password" value="${mcs.swift.password}" />
    </bean>    
    
    <bean id="solrRepresentationIndexer" 
          class="eu.europeana.cloud.service.mcs.persistent.SolrRepresentationIndexer"/>
    <bean id="producerWrapper" class="eu.europeana.cloud.service.mcs.kafka.ProducerWrapper" >
        <constructor-arg name="brokerList" value="${mcs.kafka.brokerList}" />
        <constructor-arg name="topic" value="${mcs.kafka.topic}" />
    </bean>
    
	<!-- UIS Discovery -->
	<bean id="zookeeperService" class="eu.europeana.cloud.service.coordination.ZookeeperService">
        <constructor-arg name="zookeeperAddress">
            <jee:jndi-lookup expected-type="java.lang.String" jndi-name="java:comp/env/cos/zookeeper/zookeeperAddress"/>
        </constructor-arg>
        
        <constructor-arg name="zookeeperConnectionTimeout">
            <jee:jndi-lookup expected-type="java.lang.Integer" jndi-name="java:comp/env/cos/zookeeper/zookeeperConnectionTimeout"/>
        </constructor-arg>
        <constructor-arg name="zookeeperSessionTimeout">
            <jee:jndi-lookup expected-type="java.lang.Integer" jndi-name="java:comp/env/cos/zookeeper/zookeeperSessionTimeout"/>
        </constructor-arg>
        
        <constructor-arg name="zookeeperPath">
            <jee:jndi-lookup expected-type="java.lang.String" jndi-name="java:comp/env/cos/zookeeper/zookeeperPath"/>
        </constructor-arg>
	</bean>
	
	<bean id="uisServiceDiscovery" class="eu.europeana.cloud.service.coordination.discovery.ZookeeperServiceDiscovery">
		<constructor-arg name="zookeeper" ref="zookeeperService"/>
  		<constructor-arg name="discoveryPath" value="/discovery"/>
		<constructor-arg name="serviceType" value="UIS"/>
	</bean>
	
	<bean id="uisProvider" class="eu.europeana.cloud.service.coordination.provider.ServiceProviderImpl">
		<constructor-arg name="serviceDiscovery" ref="uisServiceDiscovery"/> 
        <constructor-arg name="preferredDatacenter">
            <jee:jndi-lookup expected-type="java.lang.String" jndi-name="java:comp/env/cos/datacenterLocation"/>
        </constructor-arg>
	</bean>
	
    <bean id="uisClient" class="eu.europeana.cloud.client.uis.rest.UISClient">
		<constructor-arg name="uisProvider" ref="uisProvider"/>
    </bean>
	
    <bean id="uisHandler" class="eu.europeana.cloud.service.mcs.persistent.uis.UISClientHandlerImpl"/>
    
    <!-- MCS Registration in Zookeeper -->
    <bean id="serviceToBeAdvertised" class="eu.europeana.cloud.service.coordination.ServiceProperties">
		<constructor-arg name="serviceName" value="MCS" />
		
        <constructor-arg name="listenAddress">
            <jee:jndi-lookup expected-type="java.lang.String" jndi-name="java:comp/env/cos/listenAddress"/>
        </constructor-arg>
        
        <constructor-arg name="datacenterLocation">
            <jee:jndi-lookup expected-type="java.lang.String" jndi-name="java:comp/env/cos/datacenterLocation"/>
        </constructor-arg>
	</bean>
	
	<bean id="serviceAdvertiser" class="eu.europeana.cloud.service.coordination.registration.ZookeeperServiceAdvertiser">
		<constructor-arg name="zookeeper" ref="zookeeperService"/>
  		<constructor-arg name="discoveryPath" value="/discovery"/>
		<constructor-arg name="serviceProperties" ref="serviceToBeAdvertised"/>
	</bean>
	
	<!-- Loads properties saved in Zookeeper  -->
	<bean id="configurationLoader" class="eu.europeana.cloud.service.coordination.configuration.ConfigurationLoader">
  		<property name="zookeeperService" ref="zookeeperService"/>
  		<property name="configurationSettingsPath" value="/configuration"/>
	</bean>
    
    <bean id="loggingConfigurator" class="eu.europeana.cloud.service.commons.logging.ZookeeperLoggingConfigurator">
        <constructor-arg name="serviceAdvertiser" ref="serviceAdvertiser"/>
        <constructor-arg name="kafkaBrokerList" value="${logging.kafkaBrokerList}"/>
        <constructor-arg name="kafkaTopicName" value="${logging.kafkaTopicName}"/>
    </bean>
    
  	<import resource="authentication.xml"/>
  	<import resource="authorization.xml"/>
    
</beans>
