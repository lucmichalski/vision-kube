<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.1.xsd
                        http://www.springframework.org/schema/jee  http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                        ">
                        
    <context:component-scan base-package="eu.europeana.aas.acl.*" />
	
    <!-- -->
    <!-- - Ecloud persistent authorization application context. Permissions are stored in cassandra. - -->
    <!-- -->

    <!-- Custom success handler, answers requests with 200 OK. -->
    <bean id="cloudSecuritySuccessHandler"
            class="eu.europeana.cloud.service.aas.authentication.handlers.CloudAuthenticationSuccessHandler" />

    <!-- Custom failure handler, answers requests with 401. -->
    <bean id="cloudSecurityFailureHandler"
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />

    <!-- -->
    <!-- ========= PERMISSION STORAGE in CASSANDRA (Using Spring security ACL) ========= -->
    <!-- -->

    <bean id="aclService" class="eu.europeana.aas.acl.CassandraMutableAclService">
        <constructor-arg ref="aclRepository" />
        <constructor-arg name="aclCache">
            <null />
        </constructor-arg>
        <constructor-arg ref="permissionGrantingStrategy" />
        <constructor-arg ref="authorizationStrategy" />
        <constructor-arg ref="permissionFactory" />
    </bean>

    <bean id="aclRepository"
              class="eu.europeana.aas.acl.repository.CassandraAclRepository">
        <constructor-arg ref="cassandraProvider" />
        <constructor-arg name="initSchema" value="false" />
    </bean>

    <bean id="cassandraProvider" class="eu.europeana.cloud.cassandra.CassandraConnectionProvider">
        <constructor-arg name="hosts" value="${aas.cassandra.host}" />
        <constructor-arg name="port" value="${aas.cassandra.port}" />

        <constructor-arg name="keyspaceName" value="${aas.cassandra.authorization-keyspace}" />

        <constructor-arg name="userName" value="${aas.cassandra.user}" />
        <constructor-arg name="password" value="${aas.cassandra.password}" />
    </bean>

    <bean id="permissionGrantingStrategy"
              class="org.springframework.security.acls.domain.DefaultPermissionGrantingStrategy">
        <constructor-arg>
            <bean id="auditLogger"
                              class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
        </constructor-arg>
    </bean>

    <bean id="permissionFactory"
              class="org.springframework.security.acls.domain.DefaultPermissionFactory" />

    <bean id="authorizationStrategy"
              class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
        <constructor-arg>
            <array>
                <bean
                    class="org.springframework.security.core.authority.SimpleGrantedAuthority">
                    <constructor-arg value="ROLE_ADMIN" />
                </bean>
                <bean
                    class="org.springframework.security.core.authority.SimpleGrantedAuthority">
                    <constructor-arg value="ROLE_ADMIN" />
                </bean>
                <bean
                    class="org.springframework.security.core.authority.SimpleGrantedAuthority">
                    <constructor-arg value="ROLE_ADMIN" />
                </bean>
            </array>
        </constructor-arg>
    </bean>

    <!-- -->
    <!-- ========= Let's tell spring security to use our (Cassandra) ACL service when evaluating permission expressions. ========= -->
    <!-- -->

    <bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <property name="permissionEvaluator" ref="permissionEvaluator" />
        <property name="permissionCacheOptimizer">
            <bean
                class="org.springframework.security.acls.AclPermissionCacheOptimizer">
                <constructor-arg ref="aclService" />
            </bean>
        </property>
    </bean>

    <bean id="permissionEvaluator"
              class="org.springframework.security.acls.AclPermissionEvaluator">
        <constructor-arg ref="aclService" />
    </bean>

</beans>
